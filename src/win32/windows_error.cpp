#include "windows_error.h"
#include <format>
#include <iostream>

namespace pc {

std::string lastWindowsError() {
	DWORD errorCode = GetLastError();
	std::string result;
	if( errorCode != NO_ERROR ) {
		result.resize(1024);
		int num = FormatMessageA(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,0,errorCode,
				MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),&result[0],result.size(),0);
		result.resize(num);
	}
	return result;  // + std::tostring(errorCode) 
}

void logMessage(std::string_view source, UINT message, HWND hwnd, WPARAM wParam, LPARAM lParam) {
	std::cerr << std::format("{}: {} hwnd {:08X} wParam {} lParam {}\n", source, windowsMessageToString(message), long(hwnd), wParam, lParam);
}

std::string windowsMessageToString(UINT message) {
#define CK_MSG(id) case id: return #id
	switch(message) {
		CK_MSG(WM_CREATE);
		CK_MSG(WM_DESTROY);
		CK_MSG(WM_MOVE);
		CK_MSG(WM_SIZE);

		CK_MSG(WM_ACTIVATE);

		CK_MSG(WM_SETFOCUS);
		CK_MSG(WM_KILLFOCUS);
		CK_MSG(WM_ENABLE);
		CK_MSG(WM_SETREDRAW);
		CK_MSG(WM_SETTEXT);
		CK_MSG(WM_GETTEXT);
		CK_MSG(WM_GETTEXTLENGTH);
		CK_MSG(WM_PAINT);
		CK_MSG(WM_CLOSE);

		CK_MSG(WM_QUIT);
		CK_MSG(WM_ERASEBKGND);
		CK_MSG(WM_SYSCOLORCHANGE);
		CK_MSG(WM_SHOWWINDOW);
		CK_MSG(WM_WININICHANGE);

		CK_MSG(WM_DEVMODECHANGE);
		CK_MSG(WM_ACTIVATEAPP);
		CK_MSG(WM_FONTCHANGE);
		CK_MSG(WM_TIMECHANGE);
		CK_MSG(WM_CANCELMODE);
		CK_MSG(WM_SETCURSOR);
		CK_MSG(WM_MOUSEACTIVATE);
		CK_MSG(WM_CHILDACTIVATE);
		CK_MSG(WM_QUEUESYNC);

		CK_MSG(WM_GETMINMAXINFO);

		CK_MSG(WM_PAINTICON);
		CK_MSG(WM_ICONERASEBKGND);
		CK_MSG(WM_NEXTDLGCTL);
		CK_MSG(WM_SPOOLERSTATUS);
		CK_MSG(WM_DRAWITEM);
		CK_MSG(WM_MEASUREITEM);
		CK_MSG(WM_DELETEITEM);
		CK_MSG(WM_VKEYTOITEM);
		CK_MSG(WM_CHARTOITEM);
		CK_MSG(WM_SETFONT);
		CK_MSG(WM_GETFONT);
		CK_MSG(WM_SETHOTKEY);
		CK_MSG(WM_GETHOTKEY);
		CK_MSG(WM_QUERYDRAGICON);
		CK_MSG(WM_COMPAREITEM);
		CK_MSG(WM_COMPACTING);
		CK_MSG(WM_WINDOWPOSCHANGING);
		CK_MSG(WM_WINDOWPOSCHANGED);

		CK_MSG(WM_POWER);

		CK_MSG(WM_COPYDATA);
		CK_MSG(WM_CANCELJOURNAL);

		CK_MSG(WM_NOTIFY);
		CK_MSG(WM_INPUTLANGCHANGEREQUEST);
		CK_MSG(WM_INPUTLANGCHANGE);
		CK_MSG(WM_TCARD);
		CK_MSG(WM_HELP);
		CK_MSG(WM_USERCHANGED);
		CK_MSG(WM_NOTIFYFORMAT);

		CK_MSG(WM_CONTEXTMENU);
		CK_MSG(WM_STYLECHANGING);
		CK_MSG(WM_STYLECHANGED);
		CK_MSG(WM_DISPLAYCHANGE);
		CK_MSG(WM_GETICON);
		CK_MSG(WM_SETICON);

		CK_MSG(WM_NCCREATE);
		CK_MSG(WM_NCDESTROY);
		CK_MSG(WM_NCCALCSIZE);
		CK_MSG(WM_NCHITTEST);
		CK_MSG(WM_NCPAINT);
		CK_MSG(WM_NCACTIVATE);
		CK_MSG(WM_GETDLGCODE);
		CK_MSG(WM_NCMOUSEMOVE);
		CK_MSG(WM_NCLBUTTONDOWN);
		CK_MSG(WM_NCLBUTTONUP);
		CK_MSG(WM_NCLBUTTONDBLCLK);
		CK_MSG(WM_NCRBUTTONDOWN);
		CK_MSG(WM_NCRBUTTONUP);
		CK_MSG(WM_NCRBUTTONDBLCLK);
		CK_MSG(WM_NCMBUTTONDOWN);
		CK_MSG(WM_NCMBUTTONUP);
		CK_MSG(WM_NCMBUTTONDBLCLK);

		CK_MSG(WM_NCXBUTTONDOWN);
		CK_MSG(WM_NCXBUTTONUP);
		CK_MSG(WM_NCXBUTTONDBLCLK);

		CK_MSG(WM_INPUT_DEVICE_CHANGE);
		CK_MSG(WM_INPUT);

		CK_MSG(WM_KEYDOWN);  // = WM_KEYFIRST
		CK_MSG(WM_KEYUP);
		CK_MSG(WM_CHAR);
		CK_MSG(WM_DEADCHAR);
		CK_MSG(WM_SYSKEYDOWN);
		CK_MSG(WM_SYSKEYUP);
		CK_MSG(WM_SYSCHAR);
		CK_MSG(WM_SYSDEADCHAR);
		CK_MSG(WM_KEYLAST);  // = WM_UNICHAR

		CK_MSG(WM_IME_STARTCOMPOSITION);
		CK_MSG(WM_IME_ENDCOMPOSITION);
		CK_MSG(WM_IME_KEYLAST);  // = WM_IME_COMPOSITION

		CK_MSG(WM_INITDIALOG);
		CK_MSG(WM_COMMAND);
		CK_MSG(WM_SYSCOMMAND);
		CK_MSG(WM_TIMER);
		CK_MSG(WM_HSCROLL);
		CK_MSG(WM_VSCROLL);
		CK_MSG(WM_INITMENU);
		CK_MSG(WM_INITMENUPOPUP);
		CK_MSG(WM_GESTURE);
		CK_MSG(WM_GESTURENOTIFY);
		CK_MSG(WM_MENUSELECT);
		CK_MSG(WM_MENUCHAR);
		CK_MSG(WM_ENTERIDLE);
		CK_MSG(WM_MENURBUTTONUP);
		CK_MSG(WM_MENUDRAG);
		CK_MSG(WM_MENUGETOBJECT);
		CK_MSG(WM_UNINITMENUPOPUP);
		CK_MSG(WM_MENUCOMMAND);

		CK_MSG(WM_CHANGEUISTATE);
		CK_MSG(WM_UPDATEUISTATE);
		CK_MSG(WM_QUERYUISTATE);

		CK_MSG(WM_CTLCOLORMSGBOX);
		CK_MSG(WM_CTLCOLOREDIT);
		CK_MSG(WM_CTLCOLORLISTBOX);
		CK_MSG(WM_CTLCOLORBTN);
		CK_MSG(WM_CTLCOLORDLG);
		CK_MSG(WM_CTLCOLORSCROLLBAR);
		CK_MSG(WM_CTLCOLORSTATIC);
		CK_MSG(MN_GETHMENU);

		CK_MSG(WM_MOUSEMOVE);  // = WM_MOUSEFIRST
		CK_MSG(WM_LBUTTONDOWN);
		CK_MSG(WM_LBUTTONUP);
		CK_MSG(WM_LBUTTONDBLCLK);
		CK_MSG(WM_RBUTTONDOWN);
		CK_MSG(WM_RBUTTONUP);
		CK_MSG(WM_RBUTTONDBLCLK);
		CK_MSG(WM_MBUTTONDOWN);
		CK_MSG(WM_MBUTTONUP);
		CK_MSG(WM_MBUTTONDBLCLK);
		CK_MSG(WM_MOUSEWHEEL);
		CK_MSG(WM_XBUTTONDOWN);
		CK_MSG(WM_XBUTTONUP);
		CK_MSG(WM_XBUTTONDBLCLK);
		CK_MSG(WM_MOUSELAST);

		CK_MSG(WM_PARENTNOTIFY);
		CK_MSG(WM_ENTERMENULOOP);
		CK_MSG(WM_EXITMENULOOP);

		CK_MSG(WM_NEXTMENU);
		CK_MSG(WM_SIZING);
		CK_MSG(WM_CAPTURECHANGED);
		CK_MSG(WM_MOVING);

		CK_MSG(WM_POWERBROADCAST);

		CK_MSG(WM_DEVICECHANGE);

		CK_MSG(WM_MDICREATE);
		CK_MSG(WM_MDIDESTROY);
		CK_MSG(WM_MDIACTIVATE);
		CK_MSG(WM_MDIRESTORE);
		CK_MSG(WM_MDINEXT);
		CK_MSG(WM_MDIMAXIMIZE);
		CK_MSG(WM_MDITILE);
		CK_MSG(WM_MDICASCADE);
		CK_MSG(WM_MDIICONARRANGE);
		CK_MSG(WM_MDIGETACTIVE);

		CK_MSG(WM_MDISETMENU);
		CK_MSG(WM_ENTERSIZEMOVE);
		CK_MSG(WM_EXITSIZEMOVE);
		CK_MSG(WM_DROPFILES);
		CK_MSG(WM_MDIREFRESHMENU);

		CK_MSG(WM_TOUCH);

		CK_MSG(WM_IME_SETCONTEXT);
		CK_MSG(WM_IME_NOTIFY);
		CK_MSG(WM_IME_CONTROL);
		CK_MSG(WM_IME_COMPOSITIONFULL);
		CK_MSG(WM_IME_SELECT);
		CK_MSG(WM_IME_CHAR);
		CK_MSG(WM_IME_REQUEST);
		CK_MSG(WM_IME_KEYDOWN);
		CK_MSG(WM_IME_KEYUP);

		CK_MSG(WM_MOUSEHOVER);
		CK_MSG(WM_MOUSELEAVE);
		CK_MSG(WM_NCMOUSEHOVER);
		CK_MSG(WM_NCMOUSELEAVE);

		CK_MSG(WM_WTSSESSION_CHANGE);

		CK_MSG(WM_TABLET_FIRST);
		CK_MSG(WM_TABLET_LAST);

		CK_MSG(WM_CUT);
		CK_MSG(WM_COPY);
		CK_MSG(WM_PASTE);
		CK_MSG(WM_CLEAR);
		CK_MSG(WM_UNDO);
		CK_MSG(WM_RENDERFORMAT);
		CK_MSG(WM_RENDERALLFORMATS);
		CK_MSG(WM_DESTROYCLIPBOARD);
		CK_MSG(WM_DRAWCLIPBOARD);
		CK_MSG(WM_PAINTCLIPBOARD);
		CK_MSG(WM_VSCROLLCLIPBOARD);
		CK_MSG(WM_SIZECLIPBOARD);
		CK_MSG(WM_ASKCBFORMATNAME);
		CK_MSG(WM_CHANGECBCHAIN);
		CK_MSG(WM_HSCROLLCLIPBOARD);
		CK_MSG(WM_QUERYNEWPALETTE);
		CK_MSG(WM_PALETTEISCHANGING);
		CK_MSG(WM_PALETTECHANGED);
		CK_MSG(WM_HOTKEY);

		CK_MSG(WM_PRINT);
		CK_MSG(WM_PRINTCLIENT);

		CK_MSG(WM_APPCOMMAND);

		CK_MSG(WM_THEMECHANGED);

		CK_MSG(WM_CLIPBOARDUPDATE);

		CK_MSG(WM_DWMCOMPOSITIONCHANGED);
		CK_MSG(WM_DWMNCRENDERINGCHANGED);
		CK_MSG(WM_DWMCOLORIZATIONCOLORCHANGED);
		CK_MSG(WM_DWMWINDOWMAXIMIZEDCHANGE);
		CK_MSG(WM_DWMSENDICONICTHUMBNAIL);
		CK_MSG(WM_DWMSENDICONICLIVEPREVIEWBITMAP);

		CK_MSG(WM_GETTITLEBARINFOEX);

		CK_MSG(WM_HANDHELDFIRST);
		CK_MSG(WM_HANDHELDLAST);

		CK_MSG(WM_AFXFIRST);
		CK_MSG(WM_AFXLAST);

		CK_MSG(WM_PENWINFIRST);
		CK_MSG(WM_PENWINLAST);

		CK_MSG(WM_APP);

		CK_MSG(WM_USER);
	default:
		return std::format("UNK[{:04X}]",message); 
	}
}

}
